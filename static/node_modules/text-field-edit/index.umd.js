(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.textFieldEdit = {}));
})(this, (function (exports) { 'use strict';

    // https://github.com/fregante/text-field-edit/issues/16
    function safeTextInsert(text) {
        if (text === '') {
            return document.execCommand('delete');
        }
        return document.execCommand('insertText', false, text);
    }
    function insertTextFirefox(field, text) {
        // Found on https://www.everythingfrontend.com/posts/insert-text-into-textarea-at-cursor-position.html ðŸŽˆ
        field.setRangeText(text, field.selectionStart || 0, field.selectionEnd || 0, 'end');
        field.dispatchEvent(new InputEvent('input', {
            data: text,
            inputType: 'insertText',
        }));
    }
    /** Inserts `text` at the cursorâ€™s position, replacing any selection, with **undo** support and by firing the `input` event. */
    function insert(field, text) {
        var document = field.ownerDocument;
        var initialFocus = document.activeElement;
        if (initialFocus !== field) {
            field.focus();
        }
        if (!safeTextInsert(text)) {
            insertTextFirefox(field, text);
        }
        if (initialFocus === document.body) {
            field.blur();
        }
        else if (initialFocus instanceof HTMLElement && initialFocus !== field) {
            initialFocus.focus();
        }
    }
    /** Replaces the entire content, equivalent to `field.value = text` but with **undo** support and by firing the `input` event. */
    function set(field, text) {
        field.select();
        insert(field, text);
    }
    /** Get the selected text in a field or an empty string if nothing is selected. */
    function getSelection(field) {
        return field.value.slice(field.selectionStart, field.selectionEnd);
    }
    /** Adds the `wrappingText` before and after fieldâ€™s selection (or cursor). If `endWrappingText` is provided, it will be used instead of `wrappingText` at on the right. */
    function wrapSelection(field, wrap, wrapEnd) {
        var selectionStart = field.selectionStart, selectionEnd = field.selectionEnd;
        var selection = getSelection(field);
        insert(field, wrap + selection + (wrapEnd !== null && wrapEnd !== void 0 ? wrapEnd : wrap));
        // Restore the selection around the previously-selected text
        field.selectionStart = selectionStart + wrap.length;
        field.selectionEnd = selectionEnd + wrap.length;
    }
    /** Finds and replaces strings and regex in the fieldâ€™s value, like `field.value = field.value.replace()` but better */
    function replace(field, searchValue, replacer) {
        /** Remembers how much each match offset should be adjusted */
        var drift = 0;
        field.value.replace(searchValue, function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // Select current match to replace it later
            var matchStart = drift + args[args.length - 2];
            var matchLength = args[0].length;
            field.selectionStart = matchStart;
            field.selectionEnd = matchStart + matchLength;
            var replacement = typeof replacer === 'string' ? replacer : replacer.apply(void 0, args);
            insert(field, replacement);
            // Select replacement. Without this, the cursor would be after the replacement
            field.selectionStart = matchStart;
            drift += replacement.length - matchLength;
            return replacement;
        });
    }

    exports.getSelection = getSelection;
    exports.insert = insert;
    exports.replace = replace;
    exports.set = set;
    exports.wrapSelection = wrapSelection;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
