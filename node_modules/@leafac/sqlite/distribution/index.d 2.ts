import BetterSqlite3Database from "better-sqlite3";
export interface Options {
    safeIntegers?: boolean;
}
export interface Query {
    sourceParts: string[];
    parameters: any[];
}
export declare class Database extends BetterSqlite3Database {
    #private;
    execute(query: Query): this;
    run(query: Query, options?: Options): BetterSqlite3Database.RunResult;
    get<T>(query: Query, options?: Options): T | undefined;
    all<T>(query: Query, options?: Options): T[];
    iterate<T>(query: Query, options?: Options): IterableIterator<T>;
    executeTransaction<T>(fn: () => T): T;
    executeTransactionImmediate<T>(fn: () => T): T;
    executeTransactionExclusive<T>(fn: () => T): T;
    migrate(...migrations: (Query | ((database: this) => void | Promise<void>))[]): Promise<void>;
    getStatement(query: Query, options?: Options): BetterSqlite3Database.Statement;
}
export declare function sql(template: TemplateStringsArray, ...substitutions: any[]): Query;
//# sourceMappingURL=index.d.ts.map