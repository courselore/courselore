/**
 * @typedef {import('unist').Parent} Parent
 * @typedef {import('unist').Node} Node
 *
 * @callback Modifier
 * @param {Node} node
 * @param {number} index
 * @param {Parent} parent
 * @returns {number|void}
 *
 * @callback Modify
 * @param {Parent} node
 * @returns {void}
 */
/**
 * Turn `callback` into a child-modifier accepting a parent.
 * See `array-iterate` for more info.
 *
 * @param {Modifier} callback
 * @returns {Modify}
 */
export function modifyChildren(callback: Modifier): Modify
export type Parent = import('unist').Parent
export type Node = import('unist').Node
export type Modifier = (
  node: Node,
  index: number,
  parent: Parent
) => number | void
export type Modify = (node: Parent) => void
