"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const execa_1 = __importDefault(require("execa"));
globals_1.jest.setTimeout(300000);
const caxaDirectory = path_1.default.join(os_1.default.tmpdir(), "caxa");
const testsDirectory = path_1.default.join(caxaDirectory, "tests");
globals_1.beforeAll(async () => {
    await fs_extra_1.default.remove(caxaDirectory);
});
globals_1.test("echo-command-line-parameters", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
        "some",
        "embedded arguments",
        "--an-option-thats-part-of-the-command",
    ]);
    globals_1.expect((await execa_1.default(output, ["and", "some arguments passed on the call"], {
        all: true,
    })).all).toMatchInlineSnapshot(`
    "[
      \\"some\\",
      \\"embedded arguments\\",
      \\"--an-option-thats-part-of-the-command\\",
      \\"and\\",
      \\"some arguments passed on the call\\"
    ]"
  `);
});
if (process.platform === "darwin")
    globals_1.test("Echo Command Line Parameters.app", async () => {
        const output = path_1.default.join(testsDirectory, "Echo Command Line Parameters.app");
        await execa_1.default("ts-node", [
            "src/index.ts",
            "--input",
            "examples/echo-command-line-parameters",
            "--output",
            output,
            "--",
            "{{caxa}}/node_modules/.bin/node",
            "{{caxa}}/index.js",
            "some",
            "embedded arguments",
        ]);
        console.log(`Test the macOS Application Bundle (.app) manually:\n$ open -a "${output}"`);
        globals_1.expect((await execa_1.default(path_1.default.join(output, "/Contents/Resources/Echo Command Line Parameters"), { all: true })).all).toMatchInlineSnapshot(`
      "[
        \\"some\\",
        \\"embedded arguments\\"
      ]"
    `);
    });
if (process.platform !== "win32")
    globals_1.test("echo-command-line-parameters.sh", async () => {
        const output = path_1.default.join(testsDirectory, "echo-command-line-parameters.sh");
        await execa_1.default("ts-node", [
            "src/index.ts",
            "--input",
            "examples/echo-command-line-parameters",
            "--output",
            output,
            "--",
            "{{caxa}}/node_modules/.bin/node",
            "{{caxa}}/index.js",
            "some",
            "embedded arguments",
            "--an-option-thats-part-of-the-command",
        ]);
        globals_1.expect((await execa_1.default(output, ["and", "some arguments passed on the call"], {
            all: true,
        })).all).toMatchInlineSnapshot(`
      "[
        \\"some\\",
        \\"embedded arguments\\",
        \\"--an-option-thats-part-of-the-command\\",
        \\"and\\",
        \\"some arguments passed on the call\\"
      ]"
    `);
    });
globals_1.test("native-modules", async () => {
    const output = path_1.default.join(testsDirectory, `native-modules${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("npm", ["ci"], { cwd: "examples/native-modules" });
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/native-modules",
        "--output",
        output,
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`
          "@leafac/sqlite: {
            \\"example\\": \\"caxa native modules\\"
          }
          sharp: 48"
      `);
});
globals_1.test("false", async () => {
    const output = path_1.default.join(testsDirectory, `false${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/false",
        "--output",
        output,
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
    ]);
    await globals_1.expect(execa_1.default(output)).rejects.toThrowError("Command failed with exit code 1");
});
globals_1.test("--force", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--force${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
        "some",
        "embedded arguments",
        "--an-option-thats-part-of-the-command",
    ]);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
        "some",
        "embedded arguments",
        "--an-option-thats-part-of-the-command",
    ]);
    await globals_1.expect(execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--no-force",
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
        "some",
        "embedded arguments",
        "--an-option-thats-part-of-the-command",
    ])).rejects.toThrowError();
});
globals_1.test("--exclude", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--exclude${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--exclude",
        "examples/echo-command-line-parameters/index.js",
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "--print",
        'JSON.stringify(require("fs").existsSync(require("path").join(String.raw`{{caxa}}`, "index.js")))',
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`"false"`);
});
globals_1.test("--dedupe", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--dedupe${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--no-dedupe",
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "--print",
        'JSON.stringify(require("fs").existsSync(require("path").join(String.raw`{{caxa}}`, "package-lock.json")))',
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`"false"`);
});
globals_1.test("--prepare-command", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--prepare-command${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--prepare-command",
        `"${process.execPath}" --eval "require('fs').writeFileSync('prepare-output.txt', '')"`,
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "--print",
        'JSON.stringify(require("fs").existsSync(require("path").join(String.raw`{{caxa}}`, "prepare-output.txt")))',
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`"true"`);
});
globals_1.test("--include-node", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--include-node${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--no-include-node",
        "--",
        process.execPath,
        "--print",
        'JSON.stringify(require("fs").existsSync(require("path").join(String.raw`{{caxa}}`, "node_modules/.bin/node")))',
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`"false"`);
});
globals_1.test("--stub", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--stub${process.platform === "win32" ? ".exe" : ""}`);
    await globals_1.expect(execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--stub",
        "/a-path-that-doesnt-exist",
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
        "some",
        "embedded arguments",
        "--an-option-thats-part-of-the-command",
    ])).rejects.toThrowError();
});
globals_1.test("--identifier", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--identifier${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--identifier",
        "identifier",
        "--",
        process.execPath,
        "--print",
        'JSON.stringify(require("fs").existsSync(require("path").join(require("os").tmpdir(), "caxa/applications/identifier")))',
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`"true"`);
});
globals_1.test("--remove-build-directory", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--remove-build-directory${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--no-remove-build-directory",
        "--prepare-command",
        `"${process.execPath}" --eval "require('fs').writeFileSync('build-directory.txt', process.cwd())"`,
        "--",
        process.execPath,
        "--print",
        'JSON.stringify(require("fs").existsSync(require("fs").readFileSync(require("path").join(String.raw`{{caxa}}`, "build-directory.txt"), "utf8")))',
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatchInlineSnapshot(`"true"`);
});
globals_1.test("--uncompression-message", async () => {
    const output = path_1.default.join(testsDirectory, `echo-command-line-parameters--uncompression-message${process.platform === "win32" ? ".exe" : ""}`);
    await execa_1.default("ts-node", [
        "src/index.ts",
        "--input",
        "examples/echo-command-line-parameters",
        "--output",
        output,
        "--uncompression-message",
        "This may take a while to run the first time, please wait...",
        "--",
        "{{caxa}}/node_modules/.bin/node",
        "{{caxa}}/index.js",
        "some",
        "embedded arguments",
        "--an-option-thats-part-of-the-command",
    ]);
    globals_1.expect((await execa_1.default(output, { all: true })).all).toMatch("This may take a while to run the first time, please wait...");
});
//# sourceMappingURL=index.test.js.map